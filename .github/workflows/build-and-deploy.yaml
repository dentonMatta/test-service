name: Test Service CI

# define how to trigger the workflow
on:
  workflow_dispatch: # allows manual triggering of the workflow
  push: # triggers the workflow on push events to specified branches
    branches:
      - main 


# global environment variables
env: 
  AZURE_WEBAPP_NAME: "test-service" # replace with your Azure Web App name
  AZURE_WEBAPP_PACKAGE_PATH: "./testproj/publish" # path to your web app project
  DOTNET_VERSION: "8.0.x" # specify the .NET version to use
  SOLUTION_PATH: "testProj.sln" # solution file
  API_PROJECT_PATH: "./testProj" # path to the API project file
  PUBLISH_DIR: "./publish" # directory to publish the project


# define a sequence of tasks to be executed
jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest # specify the OS for the runner

    steps:
      - uses: actions/checkout@v4 # in built action that checks out the repository

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4 # in built action to setup .NET Core SDK
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }} # use the .NET version defined in env
    
      - name: Restore dependencies
        run: dotnet restore ${{ env.SOLUTION_PATH }} # restore dependencies for the solution

      - name: Build the project
        run: dotnet build ${{ env.SOLUTION_PATH }} --configuration Release --no-restore # build the solution in Release mode Note --no-restore is used to skip restoring dependencies again

      - name: Run tests
        run: dotnet test ${{ env.SOLUTION_PATH }} --configuration Release --no-restore --no-build --verbosity normal # run tests for the solution . NOTE --verbosity normal is used to get detailed test results in the logs

      - name: Publish the project #take the project and prepare it for deployment
        run: dotnet publish ${{ env.API_PROJECT_PATH }} --configuration Release --no-restore --no-build --property:PublishDir=${{ env.PUBLISH_DIR }} # publish the API project to the specified directory

      - name: Publish Artifact # upload the published project as an artifact
        uses: actions/upload-artifact@v4 # in built action to upload artifacts
        with:
          name: webapp-publish # name of the artifact
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} # path to the published project


  deploy:
    name: Deploy to Azure Web App
    runs-on: ubuntu-latest
    needs: [build-and-test] # this job will run after the Build and Test job

    steps:
      - name: Download Artifact # download the artifact uploaded in the previous job
        uses: actions/download-artifact@v4 # in built action to download artifacts
        with:
          name: webapp # name of the artifact to download    
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} # path to download the artifact

      - name: Deploy to Azure Web App # deploy the downloaded artifact to Azure Web App
        uses: azure/webapps-deploy@v2 # in built action to deploy to Azure Web App
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }} # name of the Azure Web App
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }} # publish profile secret stored in GitHub secrets
          package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }} # path to the package to deploy        